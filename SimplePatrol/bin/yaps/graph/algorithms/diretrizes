
Diretrizes para criação das classes para algoritmos

- Fazer a classe calcular o resultado por uma chamada explicita a um "método
  de execução". Não deve ser calculado direta ou indiretamente através do 
  construtor.
  
- Entradas dos algoritmos devem ser salvas nos atributos. Elas podem ser passadas
  no construtor ou na chamada do método de execução.
  
- Saídas do algoritmo: devem ser guardados como atributos (mesmo que também sejam 
  retornados pelo método de execução).
  
- Valores temporários usados pelo algoritmo: de preferência, devem ser deixados 
  como variáveis locais.  

- Assim, o objeto instanciado, em essência, representa o resultado (e as entradas
  complementam essa informação).
  
- Por isso, os nomes das classes devem referenciar a solução (e.g. ShortestPaths) 
  ou o problema (e.g. TSP) e não o solucionador (e.g. PathFinder). Especialmente
  no caso de heurísticas, pode-se usar um "nome" do algoritmo.
  
- Se houver multiplos algoritmos aproximados ou heurísticos, usar herança entre 
  os algoritmos para permitir usar facilmente (nos códigos clientes) diferentes 
  algoritmos 
  => ajustar TSP e coloring

OBS: 
1) Algumas classes ainda precisam ser ajustadas
2) Exemplos de classes padrão: AllShortestPaths, EulerianCircuit
3) Terminar o Christofides. 
4) Portar um algoritmo de Maximum Weighted Matching.